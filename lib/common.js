"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.PACKAGE_VERSION_CHANGES=exports.OPTIONS=exports.NOT_STAGED_CHANGES=exports.HAS_STAGED_CHANGES=exports.BRANCH=void 0;exports.addPackageVersionChanges=addPackageVersionChanges;exports.getGitRemoteShowOriginHeadBranch=getGitRemoteShowOriginHeadBranch;exports.gitTag=gitTag;exports.hasGitDiffHeadPackageVersionChanges=hasGitDiffHeadPackageVersionChanges;exports.hasStagedChanges=hasStagedChanges;exports.notGitDiffHeadPackageVersionChanges=notGitDiffHeadPackageVersionChanges;exports.notStagedChanges=notStagedChanges;exports.patchPackageVersion=patchPackageVersion;exports.trim=void 0;exports.use=use;var _debug=_interopRequireDefault(require("debug"));var _child_process=require("child_process");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const log=(0,_debug.default)('@modernpoacher/hooks:common');log('`@modernpoacher/hooks` is awake');const OPTIONS={maxBuffer:1024*500};exports.OPTIONS=OPTIONS;const BRANCH='master';exports.BRANCH=BRANCH;const PACKAGE_VERSION_CHANGES=/\-+\s+"version":\s+"(\d+\.\d+\.\d+)",+\s+\++\s+"version":\s+"(\d+\.\d+\.\d+)",+\s+/;exports.PACKAGE_VERSION_CHANGES=PACKAGE_VERSION_CHANGES;const HAS_STAGED_CHANGES=/Changes to be committed/s;exports.HAS_STAGED_CHANGES=HAS_STAGED_CHANGES;const NOT_STAGED_CHANGES=/Changes not staged for commit/s;exports.NOT_STAGED_CHANGES=NOT_STAGED_CHANGES;const trim=(v='')=>String(v).split('\n').map(v=>v.trimEnd()).join('\n').trim();exports.trim=trim;function use(key){const log=(0,_debug.default)(`@modernpoacher/hooks:${key}`);return function use(v){log(trim(v));};}function getGitRemoteShowOriginHeadBranch(){log('getGitRemoteShowOriginHeadBranch');return new Promise((resolve,reject)=>{const command='git remote show origin | awk \'/HEAD branch/ {print $NF}\'';const{stdout,stderr}=(0,_child_process.exec)(command,OPTIONS,(e,v)=>!e?resolve(trim(v)):reject(e));stdout.on('data',use('git-remote-show-origin-head-branch'));stderr.on('data',use('git-remote-show-origin-head-branch'));});}function hasGitDiffHeadPackageVersionChanges(branch=BRANCH){log('hasGitDiffHeadPackageVersionChanges');return new Promise((resolve,reject)=>{(0,_child_process.exec)(`git diff HEAD~1..HEAD~0 -- origin/${branch} package.json`,OPTIONS,async(e,v)=>!e?resolve(PACKAGE_VERSION_CHANGES.test(v)===true):reject(e));});}function notGitDiffHeadPackageVersionChanges(branch=BRANCH){log('notGitDiffHeadPackageVersionChanges');return new Promise((resolve,reject)=>{(0,_child_process.exec)(`git diff HEAD~1..HEAD~0 -- origin/${branch} package.json`,OPTIONS,async(e,v)=>!e?resolve(PACKAGE_VERSION_CHANGES.test(v)!==true):reject(e));});}function hasStagedChanges(){log('hasStagedChanges');return new Promise((resolve,reject)=>{(0,_child_process.exec)('git status',OPTIONS,(e,v)=>!e?resolve(HAS_STAGED_CHANGES.test(v)):reject(e));});}function notStagedChanges(){log('notStagedChanges');return new Promise((resolve,reject)=>{(0,_child_process.exec)('git status',OPTIONS,(e,v)=>!e?resolve(NOT_STAGED_CHANGES.test(v)):reject(e));});}function addPackageVersionChanges(){log('addPackageVersionChanges');return new Promise((resolve,reject)=>{(0,_child_process.exec)('git add package.json package-lock.json',OPTIONS,e=>!e?resolve():reject(e));});}function patchPackageVersion(){log('patchPackageVersion');return new Promise((resolve,reject)=>{(0,_child_process.exec)('npm version patch -m %s -n',OPTIONS,e=>!e?resolve():reject(e));});}function gitTag(a='0.0.0',m=a){log('gitTag');return new Promise((resolve,reject)=>{(0,_child_process.exec)(`git tag -a v${a} -m "${m}"`,OPTIONS,(e,v)=>!e?resolve(v):reject(e));});}